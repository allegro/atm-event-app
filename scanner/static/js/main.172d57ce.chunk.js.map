{"version":3,"sources":["scanner.svg","components/scanner.js","components/ui/icons.js","components/ui/buttons.js","components/sounds/index.js","components/scan-error.js","components/scan-result.js","components/app.js","serviceWorker.js","domain/validation-result.js","domain/ticket-data.js","domain/check-firebase.js","domain/check-hash.js","domain/validator.js","index.js"],"names":["module","exports","Scanner","onError","onScan","delay","facingMode","style","width","Positive","enableBackground","viewBox","cx","cy","r","fill","stroke","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeWidth","d","Negative","Button","props","className","children","playSound","tone","length","Tone","Synth","toMaster","triggerAttackRelease","playSuccessSound","playErrorSound","ScanError","this","error","onReset","onClick","React","Component","CheckResult","name","result","undefined","isValid","text","ScanResult","handleUpdate","setState","checks","entries","state","on","off","ticketData","results","map","key","tshirt","App","handleScan","data","a","continueScanning","validator","check","handleError","src","logo","alt","renderContent","Boolean","window","location","hostname","match","ValidationResult","Map","set","emit","EventEmitter","TicketData","uid","JSON","parse","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","validateTicket","httpsCallable","func","scans","digestMessage","message","msgUint8","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","b","toString","padStart","join","validHashes","digestHex","includes","Validator","qrCodeText","fromText","validationResult","forEach","registerCheck","setCheckResult","checkHash","checkOnline","ReactDOM","render","getDefault","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.172d57ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/scanner.1798b973.svg\";","import React from 'react';\nimport QrReader from 'react-qr-reader';\n\nexport default function Scanner({ onError, onScan }) {\n    return <QrReader\n        delay={300}\n        facingMode=\"environment\"\n        onError={onError}\n        onScan={onScan}\n        style={{ width: '100%' }}\n    />;\n}\n","import React from 'react';\n\nexport function Positive() {\n    return <svg enableBackground=\"new 0 0 50 50\" viewBox=\"0 0 50 50\">\n        <circle cx=\"25\" cy=\"25\" r=\"25\" fill=\"#25AE88\" />\n        <path fill=\"none\" stroke=\"#FFF\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2\" d=\"M38 15L22 33 12 25\" />\n    </svg>\n}\n\nexport function Negative() {\n    return <svg enableBackground=\"new 0 0 50 50\" viewBox=\"0 0 50 50\">\n        <circle cx=\"25\" cy=\"25\" r=\"25\" fill=\"#D75A4A\" />\n        <path fill=\"none\" stroke=\"#FFF\" strokeLinecap=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2\" d=\"M16 34L25 25 34 16\" />\n        <path fill=\"none\" stroke=\"#FFF\" strokeLinecap=\"round\" strokeMiterlimit=\"10\" strokeWidth=\"2\" d=\"M16 16L25 25 34 34\" />\n    </svg>;\n}","import React from 'react';\n\nimport \"./buttons.css\";\n\nexport function Button(props) {\n    return <button className=\"button\" {...props}>{props.children}</button>;\n}","import Tone from \"tone\";\n\nfunction playSound(tone, length) {\n    const synth = new Tone.Synth().toMaster();\n    synth.triggerAttackRelease(tone, length);\n}\n\nexport function playSuccessSound() {\n    playSound('C6', '32n');\n}\n\nexport function playErrorSound() {\n    playSound('G3', '4n');\n}\n","import React from \"react\";\n\nimport { Negative } from \"./ui/icons\";\nimport { Button } from \"./ui/buttons\";\nimport { playErrorSound } from \"./sounds\";\n\nimport \"./scan-error.css\";\n\nexport default class ScanError extends React.Component {\n    componentDidMount() {\n        playErrorSound();\n    }\n\n    render() {\n        const { error, onReset } = this.props;\n\n        return <div className=\"scan-error-container\">\n            <Negative />\n            <div className=\"scan-error-msg\">{error}</div>\n            <Button onClick={onReset}>â†º scan again</Button>\n        </div>;\n    }\n}\n","import React from \"react\";\n\nimport { Positive, Negative } from \"./ui/icons\";\nimport { Button } from \"./ui/buttons\";\nimport { playErrorSound, playSuccessSound } from \"./sounds\";\n\nimport './scan-result.css';\nimport ScanError from \"./scan-error\";\n\nfunction CheckResult({ name, result }) {\n    if (result === undefined) {\n        return <div>{name} check pending...</div>;\n    }\n\n    if (result === null) {\n        return <div>{name} check not executed</div>;\n    }\n\n    return <div className=\"result-row\">\n        <div className=\"result-icon\">{result.isValid ? <Positive /> : <Negative />}</div>\n        <div>\n            {name} check:<br />\n            {result.text}\n        </div>\n    </div>;\n}\n\nexport default class ScanResult extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checks: [...this.props.result.checks.entries()]\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.result) {\n            playSuccessSound();\n        } else {\n            playErrorSound();\n        }\n        this.props.result.on('update', this.handleUpdate);\n    }\n\n    componentWillUnmount() {\n        this.props.result.off('update', this.handleUpdate);\n    }\n\n    handleUpdate = () => {\n        this.setState({ checks: [...this.props.result.checks.entries()] });\n        playSuccessSound();\n    };\n\n    render() {\n        const { ticketData, error } = this.props.result;\n\n        if (error) {\n            return <ScanError error={error} onReset={this.props.onReset} />;\n        }\n\n        const results = this.state.checks.map(([name, result]) =>\n            <CheckResult key={name} name={name} result={result} />);\n\n        return (\n            <div className=\"scan-result-container\">\n                <div className=\"ticket-data\">\n                    ðŸ‘± {ticketData.name}<br />\n                    {ticketData.tshirt ? `ðŸ‘• ${ticketData.tshirt}` : null}\n                </div>\n\n                {results}\n                <Button onClick={this.props.onReset}>â†º scan again</Button>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport logo from '../scanner.svg';\nimport './app.css';\n\nimport Scanner from './scanner';\nimport ScanResult from './scan-result';\nimport ScanError from './scan-error';\n\nexport default class App extends React.Component {\n    state = {\n        error: null,\n        result: null\n    };\n\n    handleScan = async (data) => {\n        // no QR code is found\n        if (!data) return this.continueScanning();\n\n        try {\n            // QR code found, validate its data against external service\n            const result = this.props.validator.check(data);\n            this.setState({ result });\n        } catch (error) {\n            this.setState({ error: `invalidTicketFormat: ${data}`});\n        }\n    };\n\n    handleError = error => {\n        this.setState({ error: `scannerError: ${error}` });\n    };\n\n    continueScanning = () => {\n        this.setState({ result: null, error: null });\n    };\n\n    renderContent() {\n        const { result, error } = this.state;\n\n        if (result) {\n            return <ScanResult result={result} onReset={this.continueScanning} />;\n        }\n\n        if (error) {\n            return <ScanError error={error} onReset={this.continueScanning} />\n        }\n\n        return <Scanner onError={this.handleError} onScan={this.handleScan} />;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    ATM Ticket Scanner\n                </header>\n                <main className=\"App-main\">{this.renderContent()}</main>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { EventEmitter } from 'events';\n\nexport default class ValidationResult extends EventEmitter {\n    /**\n     * @param {TicketData} ticketData\n     */\n    constructor({ ticketData }) {\n        super();\n        this.ticketData = ticketData;\n        this.checks = new Map();\n    }\n\n    registerCheck(name) {\n        this.checks.set(name, undefined);\n    }\n\n    setCheckResult(name, result) {\n        this.checks.set(name, result);\n        this.emit('update');\n    }\n}","export default class TicketData {\n    constructor({ uid, name, tshirt, error }) {\n        this.uid = uid;\n        this.name = name;\n        this.tshirt = tshirt;\n\n        this.error = error;\n    }\n\n    /**\n     * @param {String} text\n     * @return {TicketData}\n     */\n    static fromText(text) {\n        const parsed = JSON.parse(text);\n        return new TicketData(parsed);\n    }\n}\n","import * as firebase from \"firebase/app\";\nimport \"firebase/functions\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDwGFsr2F-ju_u162LengdX2BeGZ_Bh4Xw\",\n    authDomain: \"atm-voting.firebaseapp.com\",\n    databaseURL: \"https://atm-voting.firebaseio.com\",\n    projectId: \"atm-voting\",\n    storageBucket: \"atm-voting.appspot.com\",\n    messagingSenderId: \"639364440999\",\n    appId: \"1:639364440999:web:2185c88196af2cc6\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst validateTicket = firebase.functions().httpsCallable('validateTicket');\n\nexport default {\n    name: 'online',\n    func: async (ticketData) => {\n        try {\n            const { data } = await validateTicket(ticketData);\n            return {\n                ...data,\n                text: data.isValid\n                    ? `OK (checked ${data.scans} times before)`\n                    : `NOT OK`\n            };\n        } catch {\n            return null;\n        }\n    }\n};","async function digestMessage(message) {\n    const msgUint8 = new TextEncoder().encode(message);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\nconst validHashes = [\n    '3ea3c08890606678c4e381a29305a26a9688e0f0f6191e8e52624fafb36291aa'\n];\n\nexport default {\n    name: 'offline',\n    func: async (ticketData) => {\n        const { uid } = ticketData;\n        const digestHex = await digestMessage(uid);\n        const isValid = validHashes.includes(digestHex)\n\n        return {\n            isValid,\n            text: isValid\n                ? `OK`\n                : `NOT OK (see online)`\n        };\n    }\n};","import ValidationResult from './validation-result';\nimport TicketData from './ticket-data';\n\nimport checkOnline from './check-firebase';\nimport checkHash from './check-hash';\n\nexport default class Validator {\n    constructor({ checks = [] }) {\n        this.checks = checks;\n    }\n\n    /**\n     *\n     * @param {String} qrCodeText\n     * @return {ValidationResult}\n     */\n    check(qrCodeText) {\n        const ticketData = TicketData.fromText(qrCodeText);\n        const validationResult = new ValidationResult({ ticketData });\n\n        this.checks.forEach(async (check) => {\n            validationResult.registerCheck(check.name);\n            validationResult.setCheckResult(check.name, await check.func(validationResult.ticketData));\n        });\n\n        return validationResult;\n    }\n\n    static getDefault() {\n        const checks = [ checkHash, checkOnline ];\n        return new Validator({ checks })\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport Validator from \"./domain/validator\";\n\nReactDOM.render(<App validator={Validator.getDefault()} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}